{% extends 'base.html.twig' %}

{% block title %}Dashboard{% endblock %}

{% block body %}
<div class="container-fluid py-4">
    <div class="row" id="task-board">
        {% for status in statuses %}
            <div class="col-md-4">
                <h4 class="text-center text-capitalize">{{ status.label }}</h4>
                <div class="card bg-light mb-3">
                    <div class="card-body p-2 task-column" id="column-{{ status.id }}" data-status="{{ status.id }}">
                        {% if tasks[status.id] is defined  %}
                            {% for task in tasks[status.id] %}
                                <div class="card mb-3" data-task-id="{{ task.id }}">
                                <div class="card-body">
                                    <h5 class="card-title">{{ task.title }}</h5>

                                    {# Status badge #}
                                    {% set statusColors = {
                                    'pending': 'secondary',
                                    'done': 'success',
                                    'rejected': 'danger'
                                    } %}
                                    <span class="badge bg-{{ statusColors[statuses[task.statusId].label|lower] ?: 'secondary' }}">
                                    {{ statuses[task.statusId].label|capitalize }}
                                    </span>

                                    {# Deadline badge, jeśli jest ustawiony #}
                                    {% if task.deadline %}
                                    <span class="badge bg-info text-dark ms-2">
                                        Deadline: {{ task.deadline|date('Y-m-d') }}
                                    </span>
                                    {% endif %}

                                    <div class="mt-3">
                                        <button type="button"
                                            class="btn btn-outline-secondary btn-sm"
                                            data-bs-toggle="modal"
                                            data-bs-target="#taskModal"
                                            data-bs-title="{{ task.title }}"
                                            data-bs-description="{{ task.description|default('Brak opisu') }}"
                                            data-bs-deadline="{{ task.deadline ? task.deadline|date('Y-m-d H:i') : 'Brak' }}"
                                            data-bs-status="{{ statuses[task.statusId].label }}"
                                            data-bs-task-id="{{ task.id }}"
                                            >
                                        Podgląd
                                    </button>
                                    <a href="{{ path('app_task_edit', {'id': task.id}) }}" class="btn btn-primary btn-sm">
                                        Edytuj
                                    </a>
                                    </div>
                                </div>
                                </div>
                            {% endfor %}
                        {% endif %}
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
    <!-- Bootstrap Modal -->
    <div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="taskModalLabel">Szczegóły zadania</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Zamknij"></button>
        </div>
        <div class="modal-body">
            <p><strong>Tytuł:</strong> <span id="modalTitle"></span></p>
            <p><strong>Status:</strong> <span id="modalStatus"></span></p>
            <p><strong>Deadline:</strong> <span id="modalDeadline"></span></p>
            <p><strong>Opis:</strong></p>
            <p id="modalDescription" class="border p-2 bg-light rounded" style="white-space: pre-wrap;"></p>
        </div>
        <div class="modal-footer">
            <a id="createSubtaskBtn" class="btn btn-primary">
                Dodaj subtask
            </a>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
        </div>
        </div>
    </div>
    </div>
    <script>
        document.addEventListener('turbo:load', () => {
            const taskModal = document.getElementById('taskModal');
            taskModal.addEventListener('show.bs.modal', event => {
                const button = event.relatedTarget;
                const createSubtaskBtn = document.getElementById('createSubtaskBtn');
                const parentTaskId = button.getAttribute('data-bs-task-id');

                document.getElementById('modalTitle').textContent = button.getAttribute('data-bs-title');
                document.getElementById('modalStatus').textContent = button.getAttribute('data-bs-status');
                document.getElementById('modalDeadline').textContent = button.getAttribute('data-bs-deadline');
                document.getElementById('modalDescription').textContent = button.getAttribute('data-bs-description');

                createSubtaskBtn.href = `/task/create?parent_task_id=${parentTaskId}`;
            });
        });
    </script>
    <script>
        document.addEventListener('turbo:load', () => {
            const columns = document.querySelectorAll('.task-column');

            columns.forEach(column => {
                new Sortable(column, {
                    group: 'tasks',
                    animation: 150,
                    sort: false,
                    onAdd: function (evt) {
                        const taskEl = evt.item;
                        const taskId = taskEl.dataset.taskId;
                        const newStatusId = evt.to.dataset.status;

                        fetch(`/task/${taskId}/status/${newStatusId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        })
                        .then(res => res.json())
                        .then(data => {
                            const statusLabel = data.status.label;
                            const statusColors = {
                                pending: 'secondary',
                                done: 'success',
                                rejected: 'danger'
                            };

                            const badge = taskEl.querySelector('.badge');

                            if (badge) {
                                // Remove previous color classes
                                badge.classList.remove('bg-secondary', 'bg-success', 'bg-danger');

                                // Update label and class
                                const colorClass = 'bg-' + (statusColors[statusLabel.toLowerCase()] || 'secondary');
                                badge.classList.add(colorClass);
                                badge.textContent = statusLabel.charAt(0).toUpperCase() + statusLabel.slice(1);
                            }
                        })
                        .catch(err => {
                            console.error('Status update failed:', err);
                            // Optional: revert move
                            evt.from.appendChild(evt.item);
                        });
                        }
                });
            });
        });
    </script>
</div>

<a href="{{ path('app_task_create') }}"
   class="btn btn-primary btn-lg rounded-circle"
   style="position: fixed; bottom: 20px; right: 20px; width: 60px; height: 60px; display: flex; align-items: center; justify-content: center; font-size: 24px;">
    +
</a>
{% endblock %}
